---
    
- name: Set administrator environment
  hosts: control
  become: true
  vars_files:
    - k8s_vars.yaml
    - k8s_dinamic_vars.json
    
  tasks:
    - name: Set .kube directory
      file:
        path: "{{ k8s_working_dir }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Create temporary file directory
      file:
        path: "/tmp/AutoKube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Install required packages
      apt:
        name: "{{ admin_pkges }}"
        state: latest
        update_cache: true

    - name: Install HAproxy
      apt:
        name: "haproxy"
        state: latest
        update_cache: true

    - name: Configure HAproxy
      template:
        src: haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg

    - name: Restart HAproxy service
      systemd_service:
        name: "haproxy"
        enabled: true
        state: restarted

    - name: Check if Kubernetes GPG keys already exists
      stat:
        path: "/etc/apt/keyrings/kubernetes-apt-keyring.gpg"
      register: kube_gpg_check

    - name: Download the public signing key for the Kubernetes package repositories
      shell: "curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg"
      when: kube_gpg_check.stat.exists == false

    - name: Check if Kubernetes repository exists
      stat:
        path: "/etc/apt/sources.list.d/kubernetes.list"
      register: kube_repo_check

    - name: Add Kubernetes Repository
      lineinfile:
        path: "/etc/apt/sources.list.d/kubernetes.list"
        line: "{{ kube_repo_content }}"
        create: true
      when: kube_repo_check

    - name: Install Kubectl
      apt:
        name: "kubectl"
        state: latest
        update_cache: true

  
- name: Set up Deployment Environmet
  hosts: k8snodes
  become: true
  vars_files:
    - k8s_vars.yaml
    - k8s_dinamic_vars.json
    
  tasks:
    - name: Disable swap
      command: swapoff -a

    - name: Modify /etc/fstab file
      command: sed -i.bak '/swap/s/^\//#\//' /etc/fstab

    - name: Install required packages
      apt:
        name: "{{ admin_pkges }}"
        state: latest
        update_cache: true

    - name: Check if Docker and Kubernetes GPG keys already exists
      stat:
        path: "/etc/apt/keyrings/{{ item }}-apt-keyring.gpg"
      register: gpg_check
      loop:
        - kubernetes
        - docker

    - name: Download the public signing key for the Kubernetes package repositories
      shell: "curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/{{ item.item }}-apt-keyring.gpg"
      when:
        - item.item == "kubernetes"
        - item.stat.exists == false
      loop: "{{ gpg_check.results }}"

    - name: Download the public signing key for the Docker package repositories
      shell: "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/{{ item.item }}-apt-keyring.gpg"
      when:
        - item.item == "docker"
        - item.stat.exists == false
      loop: "{{ gpg_check.results }}"

    - name: Check if Kubernetes and Docker repositories exists
      stat:
        path: "/etc/apt/sources.list.d/{{ item }}.list"
      register: repo_check
      loop:
        - kubernetes
        - docker

    - name: Add Kubernetes Repository
      lineinfile:
        path: "/etc/apt/sources.list.d/kubernetes.list"
        line: "{{ kube_repo_content }}"
        create: true
      when:
        - item.item == "kubernetes"
        - item.stat.exists == false
      loop: "{{ repo_check.results }}"

    - name: Add Docker Repository
      shell: "echo {{ docker_repo_content }} > /etc/apt/sources.list.d/docker.list"
      when:
        - item.item == "docker"
        - item.stat.exists == false
      loop: "{{ repo_check.results }}"    

    - name: Install Kubernetes and Docker packages
      apt:
        name: "{{ pkges.docker + pkges.kubernetes }}"
        state: latest
        update_cache: true

    - name: Stablish Kubernetes packages in hold
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop: "{{ pkges.kubernetes }}"

    - name: Generate default containerd config file
      shell: containerd config default > /etc/containerd/config.toml

    - name: Set systemd as cgroup driver
      lineinfile:
        path: "/etc/containerd/config.toml"
        regex: "SystemdCgroup = false"
        line: "            SystemdCgroup = true"

    - name: Enable services
      systemd_service:
        name: "{{ item }}"
        enabled: true
        state: restarted
      loop: "{{ services }}"
    
    - name: Create AutoKube directory
      file:
        path: "{{ k8s_working_dir }}/AutoKube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user}}"

    - name: Create .log directory
      file:
        path: "{{ k8s_working_dir }}/AutoKube/.log"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user}}"


- name: Deploy cluster on Master Node
  hosts: admin
  become: true
  vars:
    bin_bash: '#!/bin/bash'
  vars_files:
    - k8s_vars.yaml
    - k8s_dinamic_vars.json
    
  tasks:
    - name: Check if kube-join.sh file already exists.
      stat:
        path: "/tmp/AutoKube/kube-join.sh"
      register: kube_join_check
    
    - name: Check if kubelet is running.
      service_facts: 
    
    - name: Change kube-join.sh file permisions
      file:
        path: "/etc/kubernetes/admin.conf"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: kube_join_check.stat.exists == true
        
    - name: Kubeadm block
      block:
        - name: Initialize cluster & create join script
          shell: "{ echo {{ bin_bash | quote }}; sudo kubeadm init --apiserver-cert-extra-sans {{ lb_address_pub }} --control-plane-endpoint {{ control_plane_end_point }} --upload-certs 2>&1 | tee {{ k8s_working_dir }}/AutoKube/.log/kubeadm.log | grep -e {{ search.one | quote }} -e {{ search.two }} -e {{ search.three }} | head -n 3; } > {{ k8s_working_dir }}/AutoKube/kube-join.sh"
          register: kubeadm_check

        - name: Set cluster access point to public DNS
          lineinfile:
            path: "/etc/kubernetes/admin.conf"
            search_string: "server"
            line: "    server: https://{{ lb_address_pub }}:6443"

        - name: Copy admin.conf file to administrator
          fetch:
            src: "/etc/kubernetes/admin.conf"
            dest: "{{ k8s_working_dir }}/.kube/config"
            flat: true
        
        - name: Copy kube-join.sh file to administrator
          fetch:
            src: "{{ k8s_working_dir }}/AutoKube/kube-join.sh"
            dest: "/tmp/AutoKube/"
            flat: true
            
      when: kube_join_check.stat.exists == false and ansible_facts.services["kubelet.service"].state == "stopped"


- name: Add master nodes to the cluster
  hosts: managed
  become: true
  vars_files:
    - k8s_vars.yaml
    - k8s_dinamic_vars.json
  
  tasks:
    - name: Check if kube-join.sh file already exists.
      stat:
        path: "/tmp/AutoKube/kube-join.sh"
      register: kube_join_check
    
    - name: Check if kubelet is running.
      service_facts: 

    - name: Execution block
      block:
        - name: Check if kube-join.sh file already exists.
          stat:
            path: "/tmp/AutoKube/kube-join.sh"
          delegate_to: localhost
          register: kube_join_adm_check

        - name: Join Cluster.
          block:
            - name: Copy kube-join.sh on worker nodes.
              copy:
                src: "/tmp/AutoKube/kube-join.sh"
                dest: "{{ k8s_working_dir }}/AutoKube/"
                mode: 0700

            - name: Join cluster
              command: "{{ k8s_working_dir }}/AutoKube/kube-join.sh >> {{ k8s_working_dir }}/AutoKube/.log/kubeadm.log 2>&1"

          when: kube_join_adm_check.stat.exists == true

      when: kube_join_check.stat.exists == false and ansible_facts.services["kubelet.service"].state == "stopped"


- name: Add worker nodes to the cluster
  hosts: wknodes
  become: true
  vars_files:
    - k8s_vars.yaml
    - k8s_dinamic_vars.json
  
  tasks:
    - name: Check if kube-join.sh file already exists.
      stat:
        path: "/tmp/AutoKube/kube-join.sh"
      register: kube_join_check
    
    - name: Check if kubelet is running.
      service_facts: 
    
    - name: Execution block
      block:
        - name: Check if kube-join.sh file already exists.
          stat:
            path: "/tmp/AutoKube/kube-join.sh"
          delegate_to: localhost
          register: kube_join_adm_check

        - name: Join Cluster.
          block:
            - name: Copy kube-join.sh on worker nodes.
              copy:
                src: "/tmp/AutoKube/kube-join.sh"
                dest: "{{ k8s_working_dir }}/AutoKube/"
                mode: 0700

            - name: Remove Control plane line in file
              lineinfile:
                path: "{{ k8s_working_dir }}/AutoKube/kube-join.sh"
                search_string: "control-plane"
                state: absent

            - name: Join cluster
              command: "{{ k8s_working_dir }}/AutoKube/kube-join.sh >> {{ k8s_working_dir }}/AutoKube/.log/kubeadm.log 2>&1"
          
          when: kube_join_adm_check.stat.exists == true

      when: kube_join_check.stat.exists == false and ansible_facts.services["kubelet.service"].state == "stopped"
      

 - name: Final Steps
   hosts: control
   vars_files:
     - k8s_vars.yaml
     - k8s_dinamic_vars.json
    
   tasks:
     - name: Set Pods network
       command: "kubectl apply -f {{ cni_url }}"

    # - name: Curl Helm binary tar
     #  get_url:
      #   url: "https://get.helm.sh/helm-v3.16.4-linux-arm64.tar.gz"
       #  dest: "{{ k8s_working_dir }}/helm-v3.16.4.tar.gz"

    # - name: Unarchive Helm tar
     #  unarchive:
      #   src: "{{ k8s_working_dir }}/helm-v3.16.4.tar.gz"
       #  dest: "{{ k8s_working_dir }}/helm_dir"

    # - name: Move binary to PATH
     #  copy:
      #   src: "/ruta/origen/archivo.txt"
       #  dest: "/ruta/destino/archivo.txt"
        # force: yes
      # become: True
    

    
        
